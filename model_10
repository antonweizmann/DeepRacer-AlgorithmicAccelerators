
import math

def get_angle(a, b):
    return math.degrees(math.atan2(a[1] - b[1], a[0] - b[0]))

class Reward:

    def __init__(self):
        self.progress_old = 0.0

    def reward_function(self, params):
        # Read input parameters
        all_wheels_on_track = params['all_wheels_on_track']
        is_offtrack = params['is_offtrack']
        is_crashed = params['is_crashed']
        distance_from_center = params['distance_from_center']
        track_width = params['track_width']
        track_length = params['track_length']
        progress = params['progress']

        closest_waypoints = params['closest_waypoints']
        waypoints = params['waypoints']
        waypoint_count = len(waypoints)

        agent_x = params['x']
        agent_y = params['y']
        agent_angle = params['heading']
        steering_angle = params['steering_angle']
        speed = params['speed']

        current_waypoint = waypoints[closest_waypoints[1]]

        # Calculate the direction of the center line based on the closest waypoints
        reward_direction = 0.0
        total_weight = 0.0
        for i in range(current_waypoint, current_waypoint + 10):
            angle = get_angle(waypoints[i % waypoint_count], [agent_x, agent_y])
            angle_diff = abs(agent_angle - angle)
            if angle_diff > 180:
                angle_diff = 360 - angle_diff
            weight = i + 1 - current_waypoint * (10 - i + current_waypoint)
            total_weight += weight
            reward_direction += weight * (180 - angle_diff) / 180
        reward_direction /= total_weight

        # track_direction = get_angle(waypoints[closest_waypoints[1]], waypoints[closest_waypoints[0]])
        # direction_diff = abs(track_direction - agent_angle)
        # if direction_diff > 180:
        #     direction_diff = 360 - direction_diff
        # points_direction = 10 - direction_diff
        # reward_direction = 1e-3
        # if points_direction:
        #     reward_direction = 0.1 * points_direction

        # calculate progress reward
        reward_progress = progress - self.progress_old
        if progress < 10 and self.progress_old > 90:
            reward_progress += 100
        reward_progress *= 15 * track_length / 100

        # weigth components and calculate sum
        reward = 1.0 * reward_progress + 1.0 * speed + 3.0 * reward_direction

        # punish if off track or crashed
        if not is_offtrack or is_crashed:
            reward = 1e-3

        # set old values
        self.progress_old = progress

        # Always return a float value
        return float(reward)

reward_object = Reward()
def reward_function(params):
    return reward_object.reward_function(params)

